
G4_STEPPER_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c0  080030c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030c0  080030c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c0  080030c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080030d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080030d4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075d4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000194d  00000000  00000000  00027653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00028fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000625  00000000  00000000  000297e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dbd  00000000  00000000  00029e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000987e  00000000  00000000  0004dbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16f8  00000000  00000000  00057448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020dc  00000000  00000000  00138b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013ac1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003098 	.word	0x08003098

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003098 	.word	0x08003098

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a31      	ldr	r2, [pc, #196]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|DIR_Pin|SPI_MODE_Pin
 8000aba:	2200      	movs	r2, #0
 8000abc:	f641 3110 	movw	r1, #6928	; 0x1b10
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 ff64 	bl	8001990 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2120      	movs	r1, #32
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xfc>)
 8000ace:	f000 ff5f 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	481b      	ldr	r0, [pc, #108]	; (8000b44 <MX_GPIO_Init+0x100>)
 8000ad8:	f000 ff5a 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA8 PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|DIR_Pin|SPI_MODE_Pin
 8000adc:	f641 3310 	movw	r3, #6928	; 0x1b10
 8000ae0:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fdc8 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8000afc:	2320      	movs	r3, #32
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0xfc>)
 8000b14:	f000 fdba 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0x100>)
 8000b30:	f000 fdac 	bl	800168c <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000c00 	.word	0x48000c00

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fc26 	bl	800139e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f84d 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f7ff ff75 	bl	8000a44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b5a:	f000 f897 	bl	8000c8c <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  tmc5160_init();
 8000b5e:	f000 fb27 	bl	80011b0 <tmc5160_init>
  //tmc5160_set_inverse_motor_direction();

while (1)
{

uint32_t pos = NEMA14_FULLSTEPS;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <main+0x9c>)
 8000b64:	60bb      	str	r3, [r7, #8]
int32_t pos_to_read = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
int32_t vel= 800001;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <main+0xa0>)
 8000b6c:	617b      	str	r3, [r7, #20]
int32_t nvel = -400001;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <main+0xa4>)
 8000b70:	603b      	str	r3, [r7, #0]
//HAL_Delay(500);
//tmc5160_velocity(500001);

for (int i = 1; i < 10; i++)
 8000b72:	2301      	movs	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	e00e      	b.n	8000b96 <main+0x4e>
{
	vel = vel/i;
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]
	tmc5160_move(vel);
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f000 f9a8 	bl	8000ed8 <tmc5160_move>
	HAL_Delay(2000);
 8000b88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b8c:	f000 fc78 	bl	8001480 <HAL_Delay>
for (int i = 1; i < 10; i++)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3301      	adds	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	dded      	ble.n	8000b78 <main+0x30>
}

tmc5160_stop();
 8000b9c:	f000 fb9c 	bl	80012d8 <tmc5160_stop>
HAL_Delay(7000);
 8000ba0:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000ba4:	f000 fc6c 	bl	8001480 <HAL_Delay>

for (int i = 10; i < 1; i--)
 8000ba8:	230a      	movs	r3, #10
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e010      	b.n	8000bd0 <main+0x88>
{
	vel = vel/i;
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
	tmc5160_move(-vel);
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	425b      	negs	r3, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f98b 	bl	8000ed8 <tmc5160_move>
	HAL_Delay(2000);
 8000bc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc6:	f000 fc5b 	bl	8001480 <HAL_Delay>
for (int i = 10; i < 1; i--)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	ddeb      	ble.n	8000bae <main+0x66>
}

tmc5160_stop();
 8000bd6:	f000 fb7f 	bl	80012d8 <tmc5160_stop>
HAL_Delay(7000);
 8000bda:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000bde:	f000 fc4f 	bl	8001480 <HAL_Delay>
{
 8000be2:	e7be      	b.n	8000b62 <main+0x1a>
 8000be4:	000f00a4 	.word	0x000f00a4
 8000be8:	000c3501 	.word	0x000c3501
 8000bec:	fff9e57f 	.word	0xfff9e57f

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	; 0x50
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2238      	movs	r2, #56	; 0x38
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 fa1e 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fed4 	bl	80019c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	2303      	movs	r3, #3
 8000c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c2e:	2328      	movs	r3, #40	; 0x28
 8000c30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0318 	add.w	r3, r7, #24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 ff70 	bl	8001b28 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c4e:	f000 f818 	bl	8000c82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fa74 	bl	8002158 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c76:	f000 f804 	bl	8000c82 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
}
 8000c88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <Error_Handler+0x8>

08000c8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <MX_SPI1_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ca6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000caa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cc2:	2228      	movs	r2, #40	; 0x28
 8000cc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cda:	2207      	movs	r2, #7
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_SPI1_Init+0x74>)
 8000cec:	f001 fc18 	bl	8002520 <HAL_SPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cf6:	f7ff ffc4 	bl	8000c82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000028 	.word	0x20000028
 8000d04:	40013000 	.word	0x40013000

08000d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <HAL_SPI_MspInit+0xa0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d139      	bne.n	8000d9e <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_SPI_MspInit+0xa4>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	; (8000dac <HAL_SPI_MspInit+0xa4>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6613      	str	r3, [r2, #96]	; 0x60
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_SPI_MspInit+0xa4>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_SPI_MspInit+0xa4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_SPI_MspInit+0xa4>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_SPI_MspInit+0xa4>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f000 fc88 	bl	800168c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fc77 	bl	800168c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013000 	.word	0x40013000
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000de6:	f000 fe8f 	bl	8001b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 fafe 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <tmc5160_position>:




void tmc5160_position(int32_t position)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	723b      	strb	r3, [r7, #8]
 8000e84:	2300      	movs	r3, #0
 8000e86:	727b      	strb	r3, [r7, #9]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	72bb      	strb	r3, [r7, #10]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	72fb      	strb	r3, [r7, #11]
 8000e90:	2300      	movs	r3, #0
 8000e92:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f935 	bl	8001108 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 8000e9e:	23ad      	movs	r3, #173	; 0xad
 8000ea0:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0e1b      	lsrs	r3, r3, #24
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	141b      	asrs	r3, r3, #16
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	121b      	asrs	r3, r3, #8
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f91f 	bl	8001108 <tmc5160_write>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	0000      	movs	r0, r0
 8000ed4:	0000      	movs	r0, r0
	...

08000ed8 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" pg.39 of datasheet
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff faeb 	bl	80004bc <__aeabi_i2d>
 8000ee6:	a330      	add	r3, pc, #192	; (adr r3, 8000fa8 <tmc5160_move+0xd0>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fb50 	bl	8000590 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fd5c 	bl	80009b4 <__aeabi_d2iz>
 8000efc:	4603      	mov	r3, r0
 8000efe:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	2300      	movs	r3, #0
 8000f06:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x13; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8000f08:	23a6      	movs	r3, #166	; 0xa6
 8000f0a:	723b      	strb	r3, [r7, #8]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	727b      	strb	r3, [r7, #9]
 8000f10:	2300      	movs	r3, #0
 8000f12:	72bb      	strb	r3, [r7, #10]
 8000f14:	2313      	movs	r3, #19
 8000f16:	72fb      	strb	r3, [r7, #11]
 8000f18:	2388      	movs	r3, #136	; 0x88
 8000f1a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f8f1 	bl	8001108 <tmc5160_write>

	if (vel > 0) //select positive or negative mode depending on vel sign
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dd0f      	ble.n	8000f4c <tmc5160_move+0x74>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	723b      	strb	r3, [r7, #8]
 8000f30:	2300      	movs	r3, #0
 8000f32:	727b      	strb	r3, [r7, #9]
 8000f34:	2300      	movs	r3, #0
 8000f36:	72bb      	strb	r3, [r7, #10]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	72fb      	strb	r3, [r7, #11]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f8df 	bl	8001108 <tmc5160_write>
 8000f4a:	e00e      	b.n	8000f6a <tmc5160_move+0x92>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8000f4c:	23a0      	movs	r3, #160	; 0xa0
 8000f4e:	723b      	strb	r3, [r7, #8]
 8000f50:	2300      	movs	r3, #0
 8000f52:	727b      	strb	r3, [r7, #9]
 8000f54:	2300      	movs	r3, #0
 8000f56:	72bb      	strb	r3, [r7, #10]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	72fb      	strb	r3, [r7, #11]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f8cf 	bl	8001108 <tmc5160_write>
	}

	vel = abs(vel);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bfb8      	it	lt
 8000f70:	425b      	neglt	r3, r3
 8000f72:	607b      	str	r3, [r7, #4]
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8000f74:	23a7      	movs	r3, #167	; 0xa7
 8000f76:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel & 0xFF000000) >> 24;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	0e1b      	lsrs	r3, r3, #24
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	141b      	asrs	r3, r3, #16
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	121b      	asrs	r3, r3, #8
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel & 0x000000FF);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8b4 	bl	8001108 <tmc5160_write>
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	77ffebde 	.word	0x77ffebde
 8000fac:	3ff65e9f 	.word	0x3ff65e9f

08000fb0 <tmc5160_velocity>:

void tmc5160_velocity(uint32_t vel)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" pg.39 of datasheet
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fa6f 	bl	800049c <__aeabi_ui2d>
 8000fbe:	a350      	add	r3, pc, #320	; (adr r3, 8001100 <tmc5160_velocity+0x150>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fae4 	bl	8000590 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fd18 	bl	8000a04 <__aeabi_d2uiz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8000fe6:	23a3      	movs	r3, #163	; 0xa3
 8000fe8:	733b      	strb	r3, [r7, #12]
 8000fea:	2300      	movs	r3, #0
 8000fec:	737b      	strb	r3, [r7, #13]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f882 	bl	8001108 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8001004:	23a4      	movs	r3, #164	; 0xa4
 8001006:	733b      	strb	r3, [r7, #12]
 8001008:	2300      	movs	r3, #0
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	2300      	movs	r3, #0
 800100e:	73bb      	strb	r3, [r7, #14]
 8001010:	236e      	movs	r3, #110	; 0x6e
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	2320      	movs	r3, #32
 8001016:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f873 	bl	8001108 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8001022:	23a6      	movs	r3, #166	; 0xa6
 8001024:	733b      	strb	r3, [r7, #12]
 8001026:	2300      	movs	r3, #0
 8001028:	737b      	strb	r3, [r7, #13]
 800102a:	2300      	movs	r3, #0
 800102c:	73bb      	strb	r3, [r7, #14]
 800102e:	2323      	movs	r3, #35	; 0x23
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	2388      	movs	r3, #136	; 0x88
 8001034:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f864 	bl	8001108 <tmc5160_write>

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8001040:	23a5      	movs	r3, #165	; 0xa5
 8001042:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	0e1b      	lsrs	r3, r3, #24
 8001048:	b2db      	uxtb	r3, r3
 800104a:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	b2db      	uxtb	r3, r3
 8001052:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f84e 	bl	8001108 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 800106c:	23a7      	movs	r3, #167	; 0xa7
 800106e:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	b2db      	uxtb	r3, r3
 8001076:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f838 	bl	8001108 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 8001098:	23a8      	movs	r3, #168	; 0xa8
 800109a:	733b      	strb	r3, [r7, #12]
 800109c:	2300      	movs	r3, #0
 800109e:	737b      	strb	r3, [r7, #13]
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
 80010a4:	2323      	movs	r3, #35	; 0x23
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	2388      	movs	r3, #136	; 0x88
 80010aa:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f829 	bl	8001108 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 80010b6:	23aa      	movs	r3, #170	; 0xaa
 80010b8:	733b      	strb	r3, [r7, #12]
 80010ba:	2300      	movs	r3, #0
 80010bc:	737b      	strb	r3, [r7, #13]
 80010be:	2300      	movs	r3, #0
 80010c0:	73bb      	strb	r3, [r7, #14]
 80010c2:	236e      	movs	r3, #110	; 0x6e
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	2320      	movs	r3, #32
 80010c8:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f81a 	bl	8001108 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 80010d4:	23ab      	movs	r3, #171	; 0xab
 80010d6:	733b      	strb	r3, [r7, #12]
 80010d8:	2300      	movs	r3, #0
 80010da:	737b      	strb	r3, [r7, #13]
 80010dc:	2300      	movs	r3, #0
 80010de:	73bb      	strb	r3, [r7, #14]
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	230a      	movs	r3, #10
 80010e6:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f80b 	bl	8001108 <tmc5160_write>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	77ffebde 	.word	0x77ffebde
 8001104:	3ff65e9f 	.word	0x3ff65e9f

08001108 <tmc5160_write>:

tmc5160_write(WData);
}

void tmc5160_write(uint8_t* data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8001110:	2200      	movs	r2, #0
 8001112:	2110      	movs	r1, #16
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f000 fc3a 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	2205      	movs	r2, #5
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <tmc5160_write+0x38>)
 8001126:	f001 faa6 	bl	8002676 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 800112a:	2201      	movs	r2, #1
 800112c:	2110      	movs	r1, #16
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f000 fc2d 	bl	8001990 <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000028 	.word	0x20000028

08001144 <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 fc1b 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2305      	movs	r3, #5
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4811      	ldr	r0, [pc, #68]	; (80011ac <tmc5160_read+0x68>)
 8001168:	f001 fbf3 	bl	8002952 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800116c:	2201      	movs	r2, #1
 800116e:	2110      	movs	r1, #16
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f000 fc0c 	bl	8001990 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001180:	f000 fc06 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2305      	movs	r3, #5
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <tmc5160_read+0x68>)
 8001192:	f001 fbde 	bl	8002952 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8001196:	2201      	movs	r2, #1
 8001198:	2110      	movs	r1, #16
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f000 fbf7 	bl	8001990 <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000028 	.word	0x20000028

080011b0 <tmc5160_init>:

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" pg.39 of datasheet
}

void tmc5160_init()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	4845      	ldr	r0, [pc, #276]	; (80012d0 <tmc5160_init+0x120>)
 80011bc:	f000 fbe8 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f000 fbe1 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fbda 	bl	8001990 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80011dc:	2201      	movs	r2, #1
 80011de:	2110      	movs	r1, #16
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f000 fbd4 	bl	8001990 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f000 fbcd 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 fbc6 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f000 f93b 	bl	8001480 <HAL_Delay>

	  uint8_t WData[5] = {0};
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	713b      	strb	r3, [r7, #4]

	  WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8001212:	23ec      	movs	r3, #236	; 0xec
 8001214:	703b      	strb	r3, [r7, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	707b      	strb	r3, [r7, #1]
 800121a:	2300      	movs	r3, #0
 800121c:	70bb      	strb	r3, [r7, #2]
 800121e:	2300      	movs	r3, #0
 8001220:	70fb      	strb	r3, [r7, #3]
 8001222:	23c3      	movs	r3, #195	; 0xc3
 8001224:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 8001226:	463b      	mov	r3, r7
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff6d 	bl	8001108 <tmc5160_write>

	  WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x01; WData[4] = 0x01; //  IHOLDDELAY=10,  IRUN=10/31,  IHOLD=02/31
 800122e:	2390      	movs	r3, #144	; 0x90
 8001230:	703b      	strb	r3, [r7, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	707b      	strb	r3, [r7, #1]
 8001236:	2300      	movs	r3, #0
 8001238:	70bb      	strb	r3, [r7, #2]
 800123a:	2301      	movs	r3, #1
 800123c:	70fb      	strb	r3, [r7, #3]
 800123e:	2301      	movs	r3, #1
 8001240:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 8001242:	463b      	mov	r3, r7
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5f 	bl	8001108 <tmc5160_write>

	  WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800124a:	2391      	movs	r3, #145	; 0x91
 800124c:	703b      	strb	r3, [r7, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	707b      	strb	r3, [r7, #1]
 8001252:	2300      	movs	r3, #0
 8001254:	70bb      	strb	r3, [r7, #2]
 8001256:	2300      	movs	r3, #0
 8001258:	70fb      	strb	r3, [r7, #3]
 800125a:	230a      	movs	r3, #10
 800125c:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 800125e:	463b      	mov	r3, r7
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff51 	bl	8001108 <tmc5160_write>

	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	703b      	strb	r3, [r7, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	707b      	strb	r3, [r7, #1]
 800126e:	2300      	movs	r3, #0
 8001270:	70bb      	strb	r3, [r7, #2]
 8001272:	2300      	movs	r3, #0
 8001274:	70fb      	strb	r3, [r7, #3]
 8001276:	2304      	movs	r3, #4
 8001278:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 800127a:	463b      	mov	r3, r7
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff43 	bl	8001108 <tmc5160_write>

	  tmc5160_velocity(1000000); //initial vel config
 8001282:	4814      	ldr	r0, [pc, #80]	; (80012d4 <tmc5160_init+0x124>)
 8001284:	f7ff fe94 	bl	8000fb0 <tmc5160_velocity>

	  WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 8001288:	2393      	movs	r3, #147	; 0x93
 800128a:	703b      	strb	r3, [r7, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	707b      	strb	r3, [r7, #1]
 8001290:	2300      	movs	r3, #0
 8001292:	70bb      	strb	r3, [r7, #2]
 8001294:	2300      	movs	r3, #0
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	23c8      	movs	r3, #200	; 0xc8
 800129a:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 800129c:	463b      	mov	r3, r7
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff32 	bl	8001108 <tmc5160_write>

	  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	703b      	strb	r3, [r7, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	707b      	strb	r3, [r7, #1]
 80012ac:	2300      	movs	r3, #0
 80012ae:	70bb      	strb	r3, [r7, #2]
 80012b0:	2300      	movs	r3, #0
 80012b2:	70fb      	strb	r3, [r7, #3]
 80012b4:	2300      	movs	r3, #0
 80012b6:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 80012b8:	463b      	mov	r3, r7
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff24 	bl	8001108 <tmc5160_write>

	  HAL_Delay(100);
 80012c0:	2064      	movs	r0, #100	; 0x64
 80012c2:	f000 f8dd 	bl	8001480 <HAL_Delay>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	48000800 	.word	0x48000800
 80012d4:	000f4240 	.word	0x000f4240

080012d8 <tmc5160_stop>:
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
}

void tmc5160_stop()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	2300      	movs	r3, #0
 80012e4:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	2300      	movs	r3, #0
 80012ec:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 80012ee:	2321      	movs	r3, #33	; 0x21
 80012f0:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 80012f2:	1d3a      	adds	r2, r7, #4
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff22 	bl	8001144 <tmc5160_read>

	int32_t response = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	461a      	mov	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4313      	orrs	r3, r2
 800130c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	461a      	mov	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	461a      	mov	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4313      	orrs	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8001334:	7a3b      	ldrb	r3, [r7, #8]
 8001336:	461a      	mov	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4313      	orrs	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

    tmc5160_position(response);
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff fd96 	bl	8000e70 <tmc5160_position>
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0b      	ldr	r4, [pc, #44]	; (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001376:	f7ff fd69 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f001 fe69 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137e:	f7ff fbe3 	bl	8000b48 <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001390:	080030c8 	.word	0x080030c8
  ldr r2, =_sbss
 8001394:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001398:	20000090 	.word	0x20000090

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>

0800139e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f93d 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f80e 	bl	80013d0 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e001      	b.n	80013c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c0:	f7ff fcf6 	bl	8000db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c4:	79fb      	ldrb	r3, [r7, #7]

}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_InitTick+0x68>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d022      	beq.n	800142a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_InitTick+0x6c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_InitTick+0x68>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f93a 	bl	8001672 <HAL_SYSTICK_Config>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	d809      	bhi.n	800141e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140a:	2200      	movs	r2, #0
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	f000 f914 	bl	800163e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_InitTick+0x70>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e007      	b.n	800142e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e004      	b.n	800142e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e001      	b.n	800142e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000008 	.word	0x20000008
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a03      	ldr	r2, [pc, #12]	; (8001460 <HAL_IncTick+0x1c>)
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000008c 	.word	0x2000008c
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000008c 	.word	0x2000008c

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d004      	beq.n	80014a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_Delay+0x40>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a4:	bf00      	nop
 80014a6:	f7ff ffdf 	bl	8001468 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d8f7      	bhi.n	80014a6 <HAL_Delay+0x26>
  {
  }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000008 	.word	0x20000008

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff47 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff5e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffb2 	bl	80015e4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800169a:	e15a      	b.n	8001952 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 814c 	beq.w	800194c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d005      	beq.n	80016cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d130      	bne.n	800172e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 0201 	and.w	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b03      	cmp	r3, #3
 8001738:	d017      	beq.n	800176a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d123      	bne.n	80017be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	6939      	ldr	r1, [r7, #16]
 80017ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0203 	and.w	r2, r3, #3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001800:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_GPIO_Init+0x2e4>)
 8001802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001804:	4a5a      	ldr	r2, [pc, #360]	; (8001970 <HAL_GPIO_Init+0x2e4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6613      	str	r3, [r2, #96]	; 0x60
 800180c:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_GPIO_Init+0x2e4>)
 800180e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001818:	4a56      	ldr	r2, [pc, #344]	; (8001974 <HAL_GPIO_Init+0x2e8>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001842:	d01f      	beq.n	8001884 <HAL_GPIO_Init+0x1f8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_GPIO_Init+0x2ec>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d019      	beq.n	8001880 <HAL_GPIO_Init+0x1f4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_GPIO_Init+0x2f0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_GPIO_Init+0x1f0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a4a      	ldr	r2, [pc, #296]	; (8001980 <HAL_GPIO_Init+0x2f4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1ec>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_GPIO_Init+0x2f8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1e8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2fc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1e4>
 800186c:	2305      	movs	r3, #5
 800186e:	e00a      	b.n	8001886 <HAL_GPIO_Init+0x1fa>
 8001870:	2306      	movs	r3, #6
 8001872:	e008      	b.n	8001886 <HAL_GPIO_Init+0x1fa>
 8001874:	2304      	movs	r3, #4
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x1fa>
 8001878:	2303      	movs	r3, #3
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1fa>
 800187c:	2302      	movs	r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1fa>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1fa>
 8001884:	2300      	movs	r3, #0
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001896:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x2e8>)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a4:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_GPIO_Init+0x300>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018c8:	4a30      	ldr	r2, [pc, #192]	; (800198c <HAL_GPIO_Init+0x300>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_GPIO_Init+0x300>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f2:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_GPIO_Init+0x300>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_GPIO_Init+0x300>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <HAL_GPIO_Init+0x300>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_GPIO_Init+0x300>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_GPIO_Init+0x300>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f ae9d 	bne.w	800169c <HAL_GPIO_Init+0x10>
  }
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48001000 	.word	0x48001000
 8001988:	48001400 	.word	0x48001400
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d141      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ce:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019da:	d131      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e2:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f4:	4a41      	ldr	r2, [pc, #260]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2232      	movs	r2, #50	; 0x32
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9b      	lsrs	r3, r3, #18
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a12:	e002      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d102      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f2      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2e:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d158      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e057      	b.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a46:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a50:	e04d      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a58:	d141      	bne.n	8001ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a66:	d131      	bne.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a6e:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a80:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2232      	movs	r2, #50	; 0x32
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9e:	e002      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab2:	d102      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f2      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac6:	d112      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e011      	b.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001adc:	e007      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40007000 	.word	0x40007000
 8001b00:	20000000 	.word	0x20000000
 8001b04:	431bde83 	.word	0x431bde83

08001b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	6093      	str	r3, [r2, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40007000 	.word	0x40007000

08001b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e306      	b.n	8002148 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d075      	beq.n	8001c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b46:	4b97      	ldr	r3, [pc, #604]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b50:	4b94      	ldr	r3, [pc, #592]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3e>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_OscConfig+0x44>
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d10b      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	4b8d      	ldr	r3, [pc, #564]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d05b      	beq.n	8001c30 <HAL_RCC_OscConfig+0x108>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d157      	bne.n	8001c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e2e1      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_OscConfig+0x74>
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a84      	ldr	r2, [pc, #528]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xb0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x98>
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7e      	ldr	r2, [pc, #504]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b7c      	ldr	r3, [pc, #496]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xb0>
 8001bc0:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a77      	ldr	r2, [pc, #476]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a74      	ldr	r2, [pc, #464]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc42 	bl	8001468 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fc3e 	bl	8001468 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e2a6      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xc0>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fc2e 	bl	8001468 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fc2a 	bl	8001468 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e292      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0xe8>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d075      	beq.n	8001d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3e:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c48:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_OscConfig+0x136>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_OscConfig+0x13c>
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d11f      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x154>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e265      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4946      	ldr	r1, [pc, #280]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c90:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fb9b 	bl	80013d0 <HAL_InitTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d043      	beq.n	8001d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e251      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d023      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fbd6 	bl	8001468 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fbd2 	bl	8001468 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e23a      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	061b      	lsls	r3, r3, #24
 8001cec:	492d      	ldr	r1, [pc, #180]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	e01a      	b.n	8001d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fbb2 	bl	8001468 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fbae 	bl	8001468 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e216      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1e0>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d041      	beq.n	8001dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb8b 	bl	8001468 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d56:	f7ff fb87 	bl	8001468 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1ef      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ef      	beq.n	8001d56 <HAL_RCC_OscConfig+0x22e>
 8001d76:	e020      	b.n	8001dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fb6e 	bl	8001468 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d8e:	e00d      	b.n	8001dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fb6a 	bl	8001468 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d906      	bls.n	8001dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1d2      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dac:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ea      	bne.n	8001d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80a6 	beq.w	8001f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dcc:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2b4>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x2b6>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	4a7e      	ldr	r2, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
 8001dee:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfe:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x4bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x4bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x4bc>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb27 	bl	8001468 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff fb23 	bl	8001468 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e18b      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e30:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0x4bc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_RCC_OscConfig+0x32e>
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e54:	e024      	b.n	8001ea0 <HAL_RCC_OscConfig+0x378>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d110      	bne.n	8001e80 <HAL_RCC_OscConfig+0x358>
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	4a5e      	ldr	r2, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x378>
 8001e80:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d016      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fade 	bl	8001468 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fada 	bl	8001468 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e140      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ed      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x388>
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fac7 	bl	8001468 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff fac3 	bl	8001468 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e129      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ed      	bne.n	8001ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff fa96 	bl	8001468 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f40:	f7ff fa92 	bl	8001468 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0fa      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ef      	beq.n	8001f40 <HAL_RCC_OscConfig+0x418>
 8001f60:	e01b      	b.n	8001f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff fa79 	bl	8001468 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f7a:	f7ff fa75 	bl	8001468 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0dd      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ef      	bne.n	8001f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80d1 	beq.w	8002146 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	f000 808b 	beq.w	80020c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d15e      	bne.n	8002078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fa4f 	bl	8001468 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fcc:	e00c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff fa4b 	bl	8001468 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d905      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0b3      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ec      	bne.n	8001fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff4:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x62c>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6a11      	ldr	r1, [r2, #32]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002004:	3a01      	subs	r2, #1
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	4311      	orrs	r1, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800200e:	0212      	lsls	r2, r2, #8
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002016:	0852      	lsrs	r2, r2, #1
 8002018:	3a01      	subs	r2, #1
 800201a:	0552      	lsls	r2, r2, #21
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002022:	0852      	lsrs	r2, r2, #1
 8002024:	3a01      	subs	r2, #1
 8002026:	0652      	lsls	r2, r2, #25
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800202e:	06d2      	lsls	r2, r2, #27
 8002030:	430a      	orrs	r2, r1
 8002032:	4947      	ldr	r1, [pc, #284]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b45      	ldr	r3, [pc, #276]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a44      	ldr	r2, [pc, #272]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002044:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a41      	ldr	r2, [pc, #260]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff fa0a 	bl	8001468 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff fa06 	bl	8001468 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e06e      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x530>
 8002076:	e066      	b.n	8002146 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800207e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002084:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 8002096:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800209a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f9e2 	bl	8001468 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f9de 	bl	8001468 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e046      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x580>
 80020c6:	e03e      	b.n	8002146 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e039      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_RCC_OscConfig+0x628>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d12c      	bne.n	8002142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	3b01      	subs	r3, #1
 80020f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d123      	bne.n	8002142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d11b      	bne.n	8002142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d113      	bne.n	8002142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	3b01      	subs	r3, #1
 8002128:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d109      	bne.n	8002142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	019f800c 	.word	0x019f800c

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e11e      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 020f 	bic.w	r2, r3, #15
 8002186:	498c      	ldr	r1, [pc, #560]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e106      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d073      	beq.n	8002294 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d129      	bne.n	8002208 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f4      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021c4:	f000 f966 	bl	8002494 <RCC_GetSysClockFreqFromPLLSource>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a7c      	ldr	r2, [pc, #496]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d93f      	bls.n	8002252 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021d2:	4b7a      	ldr	r3, [pc, #488]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d033      	beq.n	8002252 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d12f      	bne.n	8002252 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021f2:	4b72      	ldr	r3, [pc, #456]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fa:	4a70      	ldr	r2, [pc, #448]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002200:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e024      	b.n	8002252 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d107      	bne.n	8002220 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0c6      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0be      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002230:	f000 f8ce 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8002234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4a61      	ldr	r2, [pc, #388]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d909      	bls.n	8002252 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002246:	4a5d      	ldr	r2, [pc, #372]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4957      	ldr	r1, [pc, #348]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002264:	f7ff f900 	bl	8001468 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff f8fc 	bl	8001468 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e095      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b4e      	ldr	r3, [pc, #312]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022c4:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022cc:	4a3b      	ldr	r2, [pc, #236]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
 80022e6:	e008      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d21d      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 020f 	bic.w	r2, r3, #15
 8002310:	4929      	ldr	r1, [pc, #164]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002318:	f7ff f8a6 	bl	8001468 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f8a2 	bl	8001468 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e03b      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d1ed      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4917      	ldr	r1, [pc, #92]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490f      	ldr	r1, [pc, #60]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002382:	f000 f825 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490c      	ldr	r1, [pc, #48]	; (80023c4 <HAL_RCC_ClockConfig+0x26c>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f812 	bl	80013d0 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
 80023c0:	04c4b400 	.word	0x04c4b400
 80023c4:	080030b0 	.word	0x080030b0
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e047      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e03e      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d136      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3301      	adds	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10c      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242e:	68d2      	ldr	r2, [r2, #12]
 8002430:	0a12      	lsrs	r2, r2, #8
 8002432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
      break;
 800243c:	e00c      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	0a12      	lsrs	r2, r2, #8
 800244c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
      break;
 8002456:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0e5b      	lsrs	r3, r3, #25
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e001      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002478:	693b      	ldr	r3, [r7, #16]
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d10c      	bne.n	80024d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c2:	68d2      	ldr	r2, [r2, #12]
 80024c4:	0a12      	lsrs	r2, r2, #8
 80024c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
    break;
 80024d0:	e00c      	b.n	80024ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024dc:	68d2      	ldr	r2, [r2, #12]
 80024de:	0a12      	lsrs	r2, r2, #8
 80024e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    break;
 80024ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0e5b      	lsrs	r3, r3, #25
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002506:	687b      	ldr	r3, [r7, #4]
}
 8002508:	4618      	mov	r0, r3
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40021000 	.word	0x40021000
 8002518:	007a1200 	.word	0x007a1200
 800251c:	00f42400 	.word	0x00f42400

08002520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e09d      	b.n	800266e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002542:	d009      	beq.n	8002558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
 800254a:	e005      	b.n	8002558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fbc8 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002598:	d902      	bls.n	80025a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e002      	b.n	80025a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80025ae:	d007      	beq.n	80025c0 <HAL_SPI_Init+0xa0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025b8:	d002      	beq.n	80025c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	ea42 0103 	orr.w	r1, r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	f003 0204 	and.w	r2, r3, #4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800263c:	ea42 0103 	orr.w	r1, r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b088      	sub	sp, #32
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_SPI_Transmit+0x22>
 8002694:	2302      	movs	r3, #2
 8002696:	e158      	b.n	800294a <HAL_SPI_Transmit+0x2d4>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026a0:	f7fe fee2 	bl	8001468 <HAL_GetTick>
 80026a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d002      	beq.n	80026bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026ba:	e13d      	b.n	8002938 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_Transmit+0x52>
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026cc:	e134      	b.n	8002938 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2203      	movs	r2, #3
 80026d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	88fa      	ldrh	r2, [r7, #6]
 80026e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002718:	d10f      	bne.n	800273a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d007      	beq.n	8002758 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002760:	d94b      	bls.n	80027fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_SPI_Transmit+0xfa>
 800276a:	8afb      	ldrh	r3, [r7, #22]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d13e      	bne.n	80027ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	1c9a      	adds	r2, r3, #2
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002794:	e02b      	b.n	80027ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d112      	bne.n	80027ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	1c9a      	adds	r2, r3, #2
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c8:	e011      	b.n	80027ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ca:	f7fe fe4d 	bl	8001468 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d803      	bhi.n	80027e2 <HAL_SPI_Transmit+0x16c>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d102      	bne.n	80027e8 <HAL_SPI_Transmit+0x172>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027ec:	e0a4      	b.n	8002938 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ce      	bne.n	8002796 <HAL_SPI_Transmit+0x120>
 80027f8:	e07c      	b.n	80028f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_SPI_Transmit+0x192>
 8002802:	8afb      	ldrh	r3, [r7, #22]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d170      	bne.n	80028ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d912      	bls.n	8002838 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	1c9a      	adds	r2, r3, #2
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b02      	subs	r3, #2
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002836:	e058      	b.n	80028ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800285e:	e044      	b.n	80028ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d12b      	bne.n	80028c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d912      	bls.n	800289e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b02      	subs	r3, #2
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800289c:	e025      	b.n	80028ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028c4:	e011      	b.n	80028ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c6:	f7fe fdcf 	bl	8001468 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d803      	bhi.n	80028de <HAL_SPI_Transmit+0x268>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d102      	bne.n	80028e4 <HAL_SPI_Transmit+0x26e>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028e8:	e026      	b.n	8002938 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1b5      	bne.n	8002860 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fb5b 	bl	8002fb4 <SPI_EndRxTxTransaction>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e000      	b.n	8002938 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002948:	7ffb      	ldrb	r3, [r7, #31]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b08a      	sub	sp, #40	; 0x28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002960:	2301      	movs	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x26>
 8002974:	2302      	movs	r3, #2
 8002976:	e1fb      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x41e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002980:	f7fe fd72 	bl	8001468 <HAL_GetTick>
 8002984:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800298c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800299c:	7efb      	ldrb	r3, [r7, #27]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d00e      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x6e>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a8:	d106      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x66>
 80029b2:	7efb      	ldrb	r3, [r7, #27]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d003      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029be:	e1cd      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x80>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x80>
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029d8:	e1c0      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d003      	beq.n	80029ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2205      	movs	r2, #5
 80029ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	887a      	ldrh	r2, [r7, #2]
 80029fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	887a      	ldrh	r2, [r7, #2]
 8002a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	887a      	ldrh	r2, [r7, #2]
 8002a1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a30:	d802      	bhi.n	8002a38 <HAL_SPI_TransmitReceive+0xe6>
 8002a32:	8a3b      	ldrh	r3, [r7, #16]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d908      	bls.n	8002a4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	e007      	b.n	8002a5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d007      	beq.n	8002a78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a80:	d97c      	bls.n	8002b7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x13e>
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d169      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	881a      	ldrh	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab4:	e056      	b.n	8002b64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d11b      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x1aa>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x1aa>
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d113      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d11c      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x1f2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	b292      	uxth	r2, r2
 8002b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b40:	2301      	movs	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b44:	f7fe fc90 	bl	8001468 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d807      	bhi.n	8002b64 <HAL_SPI_TransmitReceive+0x212>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d003      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b62:	e0fb      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1a3      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x164>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d19d      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x164>
 8002b7a:	e0df      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x23a>
 8002b84:	8a7b      	ldrh	r3, [r7, #18]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 80cb 	bne.w	8002d22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d912      	bls.n	8002bbc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b02      	subs	r3, #2
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bba:	e0b2      	b.n	8002d22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be2:	e09e      	b.n	8002d22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d134      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x30a>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02f      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0x30a>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d12c      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d912      	bls.n	8002c32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b02      	subs	r3, #2
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c30:	e012      	b.n	8002c58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d148      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x3aa>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d042      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d923      	bls.n	8002cca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	1c9a      	adds	r2, r3, #2
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b02      	subs	r3, #2
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d81f      	bhi.n	8002cf8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e016      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f103 020c 	add.w	r2, r3, #12
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cfc:	f7fe fbb4 	bl	8001468 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d803      	bhi.n	8002d14 <HAL_SPI_TransmitReceive+0x3c2>
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d102      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x3c8>
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d20:	e01c      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f47f af5b 	bne.w	8002be4 <HAL_SPI_TransmitReceive+0x292>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f47f af54 	bne.w	8002be4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f937 	bl	8002fb4 <SPI_EndRxTxTransaction>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	661a      	str	r2, [r3, #96]	; 0x60
 8002d58:	e000      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	; 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d88:	f7fe fb6e 	bl	8001468 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d98:	f7fe fb66 	bl	8001468 <HAL_GetTick>
 8002d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	0d1b      	lsrs	r3, r3, #20
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dae:	e054      	b.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d050      	beq.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db8:	f7fe fb56 	bl	8001468 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d902      	bls.n	8002dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d13d      	bne.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de6:	d111      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df0:	d004      	beq.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d107      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e14:	d10f      	bne.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e017      	b.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d19b      	bne.n	8002db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e9a:	f7fe fae5 	bl	8001468 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002eaa:	f7fe fadd 	bl	8001468 <HAL_GetTick>
 8002eae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002eb8:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00da      	lsls	r2, r3, #3
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	0d1b      	lsrs	r3, r3, #20
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ed0:	e060      	b.n	8002f94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ed8:	d107      	bne.n	8002eea <SPI_WaitFifoStateUntilTimeout+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d050      	beq.n	8002f94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ef2:	f7fe fab9 	bl	8001468 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d902      	bls.n	8002f08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d13d      	bne.n	8002f84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f20:	d111      	bne.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2a:	d004      	beq.n	8002f36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f34:	d107      	bne.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	d10f      	bne.n	8002f70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e010      	b.n	8002fa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d196      	bne.n	8002ed2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff ff5b 	bl	8002e88 <SPI_WaitFifoStateUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e027      	b.n	8003038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff fec0 	bl	8002d78 <SPI_WaitFlagStateUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e014      	b.n	8003038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff ff34 	bl	8002e88 <SPI_WaitFifoStateUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e000      	b.n	8003038 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4d0d      	ldr	r5, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1b64      	subs	r4, r4, r5
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2600      	movs	r6, #0
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4d0b      	ldr	r5, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 f818 	bl	8003098 <_init>
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2600      	movs	r6, #0
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f855 3b04 	ldr.w	r3, [r5], #4
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	080030c0 	.word	0x080030c0
 800308c:	080030c0 	.word	0x080030c0
 8003090:	080030c0 	.word	0x080030c0
 8003094:	080030c4 	.word	0x080030c4

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr
