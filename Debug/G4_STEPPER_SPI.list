
G4_STEPPER_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002060  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002238  08002238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002248  08002248  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002248  08002248  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002248  08002248  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800225c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800225c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007381  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001843  00000000  00000000  00027400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  00028c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ec  00000000  00000000  00029448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024029  00000000  00000000  00029a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009692  00000000  00000000  0004da5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ec9  00000000  00000000  000570ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e60  00000000  00000000  00138fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002220 	.word	0x08002220

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002220 	.word	0x08002220

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	; 0x28
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800022e:	4b38      	ldr	r3, [pc, #224]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a37      	ldr	r2, [pc, #220]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000234:	f043 0320 	orr.w	r3, r3, #32
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023a:	4b35      	ldr	r3, [pc, #212]	; (8000310 <MX_GPIO_Init+0xf8>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b32      	ldr	r3, [pc, #200]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	4a31      	ldr	r2, [pc, #196]	; (8000310 <MX_GPIO_Init+0xf8>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025e:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	4a2b      	ldr	r2, [pc, #172]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000264:	f043 0304 	orr.w	r3, r3, #4
 8000268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <MX_GPIO_Init+0xf8>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026e:	f003 0304 	and.w	r3, r3, #4
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000276:	4b26      	ldr	r3, [pc, #152]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027a:	4a25      	ldr	r2, [pc, #148]	; (8000310 <MX_GPIO_Init+0xf8>)
 800027c:	f043 0308 	orr.w	r3, r3, #8
 8000280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <MX_GPIO_Init+0xf8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	f003 0308 	and.w	r3, r3, #8
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|DIR_Pin|SPI_MODE_Pin
 800028e:	2200      	movs	r2, #0
 8000290:	f641 3110 	movw	r1, #6928	; 0x1b10
 8000294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000298:	f000 fe50 	bl	8000f3c <HAL_GPIO_WritePin>
                          |SD_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2120      	movs	r1, #32
 80002a0:	481c      	ldr	r0, [pc, #112]	; (8000314 <MX_GPIO_Init+0xfc>)
 80002a2:	f000 fe4b 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2104      	movs	r1, #4
 80002aa:	481b      	ldr	r0, [pc, #108]	; (8000318 <MX_GPIO_Init+0x100>)
 80002ac:	f000 fe46 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA8 PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|DIR_Pin|SPI_MODE_Pin
 80002b0:	f641 3310 	movw	r3, #6928	; 0x1b10
 80002b4:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2300      	movs	r3, #0
 80002c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4619      	mov	r1, r3
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f000 fcb4 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 80002d0:	2320      	movs	r3, #32
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	2300      	movs	r3, #0
 80002da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	4619      	mov	r1, r3
 80002e6:	480b      	ldr	r0, [pc, #44]	; (8000314 <MX_GPIO_Init+0xfc>)
 80002e8:	f000 fca6 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002ec:	2304      	movs	r3, #4
 80002ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4619      	mov	r1, r3
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_GPIO_Init+0x100>)
 8000304:	f000 fc98 	bl	8000c38 <HAL_GPIO_Init>

}
 8000308:	bf00      	nop
 800030a:	3728      	adds	r7, #40	; 0x28
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	48000800 	.word	0x48000800
 8000318:	48000c00 	.word	0x48000c00

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fb12 	bl	800094a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f833 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f7ff ff75 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 800032e:	f000 f87d 	bl	800042c <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  tmc5160_init();
 8000332:	f000 fa49 	bl	80007c8 <tmc5160_init>

while (1)
{

uint32_t pos = NEMA14_FULLSTEPS;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <main+0x68>)
 8000338:	607b      	str	r3, [r7, #4]

tmc5160_velocity(100000);
 800033a:	4813      	ldr	r0, [pc, #76]	; (8000388 <main+0x6c>)
 800033c:	f000 f98a 	bl	8000654 <tmc5160_velocity>
//HAL_Delay(100);
tmc5160_position(pos);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f964 	bl	8000610 <tmc5160_position>

HAL_Delay(15000);
 8000348:	f643 2098 	movw	r0, #15000	; 0x3a98
 800034c:	f000 fb6e 	bl	8000a2c <HAL_Delay>

tmc5160_position(0);
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f95d 	bl	8000610 <tmc5160_position>

HAL_Delay(15000);
 8000356:	f643 2098 	movw	r0, #15000	; 0x3a98
 800035a:	f000 fb67 	bl	8000a2c <HAL_Delay>

tmc5160_velocity(1700000);
 800035e:	480b      	ldr	r0, [pc, #44]	; (800038c <main+0x70>)
 8000360:	f000 f978 	bl	8000654 <tmc5160_velocity>
//HAL_Delay(100);
tmc5160_position(pos);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f952 	bl	8000610 <tmc5160_position>
HAL_Delay(5000);
 800036c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000370:	f000 fb5c 	bl	8000a2c <HAL_Delay>
tmc5160_position(0);
 8000374:	2000      	movs	r0, #0
 8000376:	f000 f94b 	bl	8000610 <tmc5160_position>
HAL_Delay(5000);
 800037a:	f241 3088 	movw	r0, #5000	; 0x1388
 800037e:	f000 fb55 	bl	8000a2c <HAL_Delay>
{
 8000382:	e7d8      	b.n	8000336 <main+0x1a>
 8000384:	000f00a4 	.word	0x000f00a4
 8000388:	000186a0 	.word	0x000186a0
 800038c:	0019f0a0 	.word	0x0019f0a0

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2238      	movs	r2, #56	; 0x38
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 ff12 	bl	80021c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 fdda 	bl	8000f6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	2302      	movs	r3, #2
 80003c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c6:	2303      	movs	r3, #3
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003ce:	2328      	movs	r3, #40	; 0x28
 80003d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fe76 	bl	80010d4 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003ee:	f000 f818 	bl	8000422 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	2303      	movs	r3, #3
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2104      	movs	r1, #4
 800040a:	4618      	mov	r0, r3
 800040c:	f001 f97a 	bl	8001704 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000416:	f000 f804 	bl	8000422 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3750      	adds	r7, #80	; 0x50
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000426:	b672      	cpsid	i
}
 8000428:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042a:	e7fe      	b.n	800042a <Error_Handler+0x8>

0800042c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <MX_SPI1_Init+0x78>)
 8000434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800043c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000446:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800044a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_SPI1_Init+0x74>)
 800044e:	2202      	movs	r2, #2
 8000450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000454:	2201      	movs	r2, #1
 8000456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_SPI1_Init+0x74>)
 800045a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800045e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_SPI1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_SPI1_Init+0x74>)
 800047a:	2207      	movs	r2, #7
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_SPI1_Init+0x74>)
 800048c:	f001 fb1e 	bl	8001acc <HAL_SPI_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000496:	f7ff ffc4 	bl	8000422 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000028 	.word	0x20000028
 80004a4:	40013000 	.word	0x40013000

080004a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a20      	ldr	r2, [pc, #128]	; (8000548 <HAL_SPI_MspInit+0xa0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d139      	bne.n	800053e <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ca:	4b20      	ldr	r3, [pc, #128]	; (800054c <HAL_SPI_MspInit+0xa4>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	4a1f      	ldr	r2, [pc, #124]	; (800054c <HAL_SPI_MspInit+0xa4>)
 80004d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004d4:	6613      	str	r3, [r2, #96]	; 0x60
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <HAL_SPI_MspInit+0xa4>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <HAL_SPI_MspInit+0xa4>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <HAL_SPI_MspInit+0xa4>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_SPI_MspInit+0xa4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004fa:	2320      	movs	r3, #32
 80004fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2301      	movs	r3, #1
 8000504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000506:	2301      	movs	r3, #1
 8000508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800050a:	2305      	movs	r3, #5
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f000 fb8e 	bl	8000c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800051c:	23c0      	movs	r3, #192	; 0xc0
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000528:	2301      	movs	r3, #1
 800052a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800052c:	2305      	movs	r3, #5
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f000 fb7d 	bl	8000c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	; 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40013000 	.word	0x40013000
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6613      	str	r3, [r2, #96]	; 0x60
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6593      	str	r3, [r2, #88]	; 0x58
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_MspInit+0x44>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000586:	f000 fd95 	bl	80010b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e4:	f000 fa04 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <tmc5160_position>:




void tmc5160_position(int32_t position)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	2300      	movs	r3, #0
 800061e:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xAD; //moving register
 8000620:	23ad      	movs	r3, #173	; 0xad
 8000622:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	0e1b      	lsrs	r3, r3, #24
 8000628:	b2db      	uxtb	r3, r3
 800062a:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	141b      	asrs	r3, r3, #16
 8000630:	b2db      	uxtb	r3, r3
 8000632:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	121b      	asrs	r3, r3, #8
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f89a 	bl	8000780 <tmc5160_write>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <tmc5160_velocity>:

void tmc5160_velocity(uint32_t vel)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	2300      	movs	r3, #0
 8000662:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	617b      	str	r3, [r7, #20]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800066a:	23a3      	movs	r3, #163	; 0xa3
 800066c:	733b      	strb	r3, [r7, #12]
 800066e:	2300      	movs	r3, #0
 8000670:	737b      	strb	r3, [r7, #13]
 8000672:	2300      	movs	r3, #0
 8000674:	73bb      	strb	r3, [r7, #14]
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	230a      	movs	r3, #10
 800067c:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f87c 	bl	8000780 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x4e; WData[4] = 0x20; // A1 = 20 000 First acceleration
 8000688:	23a4      	movs	r3, #164	; 0xa4
 800068a:	733b      	strb	r3, [r7, #12]
 800068c:	2300      	movs	r3, #0
 800068e:	737b      	strb	r3, [r7, #13]
 8000690:	2300      	movs	r3, #0
 8000692:	73bb      	strb	r3, [r7, #14]
 8000694:	234e      	movs	r3, #78	; 0x4e
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	2320      	movs	r3, #32
 800069a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f86d 	bl	8000780 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x13; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 80006a6:	23a6      	movs	r3, #166	; 0xa6
 80006a8:	733b      	strb	r3, [r7, #12]
 80006aa:	2300      	movs	r3, #0
 80006ac:	737b      	strb	r3, [r7, #13]
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	2313      	movs	r3, #19
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	2388      	movs	r3, #136	; 0x88
 80006b8:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f85e 	bl	8000780 <tmc5160_write>

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 80006c4:	23a5      	movs	r3, #165	; 0xa5
 80006c6:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	0e1b      	lsrs	r3, r3, #24
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	0c1b      	lsrs	r3, r3, #16
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f848 	bl	8000780 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 80006f0:	23a7      	movs	r3, #167	; 0xa7
 80006f2:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	b2db      	uxtb	r3, r3
 8000702:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b2db      	uxtb	r3, r3
 800070a:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f832 	bl	8000780 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x13; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 800071c:	23a8      	movs	r3, #168	; 0xa8
 800071e:	733b      	strb	r3, [r7, #12]
 8000720:	2300      	movs	r3, #0
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	2300      	movs	r3, #0
 8000726:	73bb      	strb	r3, [r7, #14]
 8000728:	2313      	movs	r3, #19
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	2388      	movs	r3, #136	; 0x88
 800072e:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f823 	bl	8000780 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x4e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 800073a:	23aa      	movs	r3, #170	; 0xaa
 800073c:	733b      	strb	r3, [r7, #12]
 800073e:	2300      	movs	r3, #0
 8000740:	737b      	strb	r3, [r7, #13]
 8000742:	2300      	movs	r3, #0
 8000744:	73bb      	strb	r3, [r7, #14]
 8000746:	234e      	movs	r3, #78	; 0x4e
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	2320      	movs	r3, #32
 800074c:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f814 	bl	8000780 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8000758:	23ab      	movs	r3, #171	; 0xab
 800075a:	733b      	strb	r3, [r7, #12]
 800075c:	2300      	movs	r3, #0
 800075e:	737b      	strb	r3, [r7, #13]
 8000760:	2300      	movs	r3, #0
 8000762:	73bb      	strb	r3, [r7, #14]
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	230a      	movs	r3, #10
 800076a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f805 	bl	8000780 <tmc5160_write>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <tmc5160_write>:

tmc5160_write(WData);
}

void tmc5160_write(uint8_t* data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f000 fbd4 	bl	8000f3c <HAL_GPIO_WritePin>
	tmc5160_delay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 f949 	bl	8000a2c <HAL_Delay>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	2205      	movs	r2, #5
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <tmc5160_write+0x44>)
 80007a4:	f001 fa3d 	bl	8001c22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 fbc4 	bl	8000f3c <HAL_GPIO_WritePin>
	tmc5160_delay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 f939 	bl	8000a2c <HAL_Delay>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028

080007c8 <tmc5160_init>:
	tmc5160_delay(1);
}


void tmc5160_init()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	4847      	ldr	r0, [pc, #284]	; (80008f0 <tmc5160_init+0x128>)
 80007d4:	f000 fbb2 	bl	8000f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fbab 	bl	8000f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fba4 	bl	8000f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80007f4:	2201      	movs	r2, #1
 80007f6:	2110      	movs	r1, #16
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 fb9e 	bl	8000f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 fb97 	bl	8000f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f000 fb90 	bl	8000f3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	f000 f905 	bl	8000a2c <HAL_Delay>

	  uint8_t RData[5] = {0};
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	2300      	movs	r3, #0
 8000828:	733b      	strb	r3, [r7, #12]
	  uint8_t WData[5] = {0};
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	713b      	strb	r3, [r7, #4]

	  WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8000832:	23ec      	movs	r3, #236	; 0xec
 8000834:	703b      	strb	r3, [r7, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	707b      	strb	r3, [r7, #1]
 800083a:	2300      	movs	r3, #0
 800083c:	70bb      	strb	r3, [r7, #2]
 800083e:	2300      	movs	r3, #0
 8000840:	70fb      	strb	r3, [r7, #3]
 8000842:	23c3      	movs	r3, #195	; 0xc3
 8000844:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff99 	bl	8000780 <tmc5160_write>

	  WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0A; WData[4] = 0x01; //  IHOLDDELAY=10,  IRUN=10/31,  IHOLD=02/31
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	703b      	strb	r3, [r7, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	707b      	strb	r3, [r7, #1]
 8000856:	2300      	movs	r3, #0
 8000858:	70bb      	strb	r3, [r7, #2]
 800085a:	230a      	movs	r3, #10
 800085c:	70fb      	strb	r3, [r7, #3]
 800085e:	2301      	movs	r3, #1
 8000860:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 8000862:	463b      	mov	r3, r7
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff8b 	bl	8000780 <tmc5160_write>

	  WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800086a:	2391      	movs	r3, #145	; 0x91
 800086c:	703b      	strb	r3, [r7, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	707b      	strb	r3, [r7, #1]
 8000872:	2300      	movs	r3, #0
 8000874:	70bb      	strb	r3, [r7, #2]
 8000876:	2300      	movs	r3, #0
 8000878:	70fb      	strb	r3, [r7, #3]
 800087a:	230a      	movs	r3, #10
 800087c:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 800087e:	463b      	mov	r3, r7
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff7d 	bl	8000780 <tmc5160_write>

	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	703b      	strb	r3, [r7, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	707b      	strb	r3, [r7, #1]
 800088e:	2300      	movs	r3, #0
 8000890:	70bb      	strb	r3, [r7, #2]
 8000892:	2300      	movs	r3, #0
 8000894:	70fb      	strb	r3, [r7, #3]
 8000896:	2301      	movs	r3, #1
 8000898:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 800089a:	463b      	mov	r3, r7
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff6f 	bl	8000780 <tmc5160_write>

	  tmc5160_velocity(1000000); //initial vel config
 80008a2:	4814      	ldr	r0, [pc, #80]	; (80008f4 <tmc5160_init+0x12c>)
 80008a4:	f7ff fed6 	bl	8000654 <tmc5160_velocity>

	  WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 80008a8:	2393      	movs	r3, #147	; 0x93
 80008aa:	703b      	strb	r3, [r7, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	707b      	strb	r3, [r7, #1]
 80008b0:	2300      	movs	r3, #0
 80008b2:	70bb      	strb	r3, [r7, #2]
 80008b4:	2300      	movs	r3, #0
 80008b6:	70fb      	strb	r3, [r7, #3]
 80008b8:	23c8      	movs	r3, #200	; 0xc8
 80008ba:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 80008bc:	463b      	mov	r3, r7
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff5e 	bl	8000780 <tmc5160_write>

	  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	703b      	strb	r3, [r7, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	707b      	strb	r3, [r7, #1]
 80008cc:	2300      	movs	r3, #0
 80008ce:	70bb      	strb	r3, [r7, #2]
 80008d0:	2300      	movs	r3, #0
 80008d2:	70fb      	strb	r3, [r7, #3]
 80008d4:	2300      	movs	r3, #0
 80008d6:	713b      	strb	r3, [r7, #4]
	  tmc5160_write(WData);
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff50 	bl	8000780 <tmc5160_write>

	  HAL_Delay(100);
 80008e0:	2064      	movs	r0, #100	; 0x64
 80008e2:	f000 f8a3 	bl	8000a2c <HAL_Delay>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	48000800 	.word	0x48000800
 80008f4:	000f4240 	.word	0x000f4240

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff fe63 	bl	80005ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 fc57 	bl	80021d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fcf7 	bl	800031c <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002250 	.word	0x08002250
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	20000090 	.word	0x20000090

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>

0800094a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f93d 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f80e 	bl	800097c <HAL_InitTick>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	e001      	b.n	8000970 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096c:	f7ff fdf0 	bl	8000550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000970:	79fb      	ldrb	r3, [r7, #7]

}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_InitTick+0x68>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d022      	beq.n	80009d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_InitTick+0x6c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_InitTick+0x68>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800099c:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f93a 	bl	8000c1e <HAL_SYSTICK_Config>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10f      	bne.n	80009d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d809      	bhi.n	80009ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	2200      	movs	r2, #0
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	f000 f914 	bl	8000bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_InitTick+0x70>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e007      	b.n	80009da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e004      	b.n	80009da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e001      	b.n	80009da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x1c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x20>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x1c>)
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	20000008 	.word	0x20000008

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff ffee 	bl	8000a14 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d004      	beq.n	8000a50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_Delay+0x40>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a50:	bf00      	nop
 8000a52:	f7ff ffdf 	bl	8000a14 <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d8f7      	bhi.n	8000a52 <HAL_Delay+0x26>
  {
  }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff47 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff5e 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff90 	bl	8000b28 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5f 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffb2 	bl	8000b90 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c46:	e15a      	b.n	8000efe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 814c 	beq.w	8000ef8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 0201 	and.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	6939      	ldr	r1, [r7, #16]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80a6 	beq.w	8000ef8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <HAL_GPIO_Init+0x2e4>)
 8000dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db0:	4a5a      	ldr	r2, [pc, #360]	; (8000f1c <HAL_GPIO_Init+0x2e4>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6613      	str	r3, [r2, #96]	; 0x60
 8000db8:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <HAL_GPIO_Init+0x2e4>)
 8000dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc4:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dee:	d01f      	beq.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a4c      	ldr	r2, [pc, #304]	; (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d019      	beq.n	8000e2c <HAL_GPIO_Init+0x1f4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <HAL_GPIO_Init+0x2f0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d013      	beq.n	8000e28 <HAL_GPIO_Init+0x1f0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a4a      	ldr	r2, [pc, #296]	; (8000f2c <HAL_GPIO_Init+0x2f4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1ec>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a49      	ldr	r2, [pc, #292]	; (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1e8>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a48      	ldr	r2, [pc, #288]	; (8000f34 <HAL_GPIO_Init+0x2fc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1e4>
 8000e18:	2305      	movs	r3, #5
 8000e1a:	e00a      	b.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	e008      	b.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e24:	2303      	movs	r3, #3
 8000e26:	e004      	b.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e30:	2300      	movs	r3, #0
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	4093      	lsls	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e42:	4937      	ldr	r1, [pc, #220]	; (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e9e:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_GPIO_Init+0x300>)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa22 f303 	lsr.w	r3, r2, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f47f ae9d 	bne.w	8000c48 <HAL_GPIO_Init+0x10>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	48000400 	.word	0x48000400
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	48000c00 	.word	0x48000c00
 8000f30:	48001000 	.word	0x48001000
 8000f34:	48001400 	.word	0x48001400
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d141      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f86:	d131      	bne.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fa0:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fa8:	4b40      	ldr	r3, [pc, #256]	; (80010ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2232      	movs	r2, #50	; 0x32
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	0c9b      	lsrs	r3, r3, #18
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbe:	e002      	b.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd2:	d102      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f2      	bne.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d158      	bne.n	800109a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e057      	b.n	800109c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ff2:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ffc:	e04d      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001004:	d141      	bne.n	800108a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001012:	d131      	bne.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101a:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2232      	movs	r2, #50	; 0x32
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	0c9b      	lsrs	r3, r3, #18
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800104a:	e002      	b.n	8001052 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3b01      	subs	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800105e:	d102      	bne.n	8001066 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f2      	bne.n	800104c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001072:	d112      	bne.n	800109a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e011      	b.n	800109c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001088:	e007      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001098:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40007000 	.word	0x40007000
 80010ac:	20000000 	.word	0x20000000
 80010b0:	431bde83 	.word	0x431bde83

080010b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6093      	str	r3, [r2, #8]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40007000 	.word	0x40007000

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e306      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d075      	beq.n	80011de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f2:	4b97      	ldr	r3, [pc, #604]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fc:	4b94      	ldr	r3, [pc, #592]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2b0c      	cmp	r3, #12
 800110a:	d102      	bne.n	8001112 <HAL_RCC_OscConfig+0x3e>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d002      	beq.n	8001118 <HAL_RCC_OscConfig+0x44>
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d10b      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	4b8d      	ldr	r3, [pc, #564]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d05b      	beq.n	80011dc <HAL_RCC_OscConfig+0x108>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d157      	bne.n	80011dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e2e1      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d106      	bne.n	8001148 <HAL_RCC_OscConfig+0x74>
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a84      	ldr	r2, [pc, #528]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x98>
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a7e      	ldr	r2, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b7c      	ldr	r3, [pc, #496]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a7b      	ldr	r2, [pc, #492]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 800116c:	4b78      	ldr	r3, [pc, #480]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a77      	ldr	r2, [pc, #476]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b75      	ldr	r3, [pc, #468]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a74      	ldr	r2, [pc, #464]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fc42 	bl	8000a14 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fc3e 	bl	8000a14 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e2a6      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xc0>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fc2e 	bl	8000a14 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fc2a 	bl	8000a14 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e292      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ce:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0xe8>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d075      	beq.n	80012d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ea:	4b59      	ldr	r3, [pc, #356]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	4b56      	ldr	r3, [pc, #344]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d102      	bne.n	800120a <HAL_RCC_OscConfig+0x136>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d002      	beq.n	8001210 <HAL_RCC_OscConfig+0x13c>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b04      	cmp	r3, #4
 800120e:	d11f      	bne.n	8001250 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001210:	4b4f      	ldr	r3, [pc, #316]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x154>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e265      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b49      	ldr	r3, [pc, #292]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	061b      	lsls	r3, r3, #24
 8001236:	4946      	ldr	r1, [pc, #280]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800123c:	4b45      	ldr	r3, [pc, #276]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fb9b 	bl	800097c <HAL_InitTick>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d043      	beq.n	80012d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e251      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fbd6 	bl	8000a14 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fbd2 	bl	8000a14 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e23a      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	061b      	lsls	r3, r3, #24
 8001298:	492d      	ldr	r1, [pc, #180]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
 800129e:	e01a      	b.n	80012d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80012a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbb2 	bl	8000a14 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fbae 	bl	8000a14 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e216      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1e0>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d041      	beq.n	8001366 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d01c      	beq.n	8001324 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f0:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb8b 	bl	8000a14 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fb87 	bl	8000a14 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1ef      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0ef      	beq.n	8001302 <HAL_RCC_OscConfig+0x22e>
 8001322:	e020      	b.n	8001366 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fb6e 	bl	8000a14 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800133a:	e00d      	b.n	8001358 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff fb6a 	bl	8000a14 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d906      	bls.n	8001358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1d2      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001358:	4b8c      	ldr	r3, [pc, #560]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ea      	bne.n	800133c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80a6 	beq.w	80014c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x2b4>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x2b6>
 8001388:	2300      	movs	r3, #0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00d      	beq.n	80013aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b7f      	ldr	r3, [pc, #508]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a7e      	ldr	r2, [pc, #504]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b7c      	ldr	r3, [pc, #496]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <HAL_RCC_OscConfig+0x4bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x4bc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a75      	ldr	r2, [pc, #468]	; (8001590 <HAL_RCC_OscConfig+0x4bc>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb27 	bl	8000a14 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fb23 	bl	8000a14 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e18b      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013dc:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <HAL_RCC_OscConfig+0x4bc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_RCC_OscConfig+0x32e>
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001400:	e024      	b.n	800144c <HAL_RCC_OscConfig+0x378>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d110      	bne.n	800142c <HAL_RCC_OscConfig+0x358>
 800140a:	4b60      	ldr	r3, [pc, #384]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001410:	4a5e      	ldr	r2, [pc, #376]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800141c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001420:	4a5a      	ldr	r2, [pc, #360]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800142a:	e00f      	b.n	800144c <HAL_RCC_OscConfig+0x378>
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d016      	beq.n	8001482 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fade 	bl	8000a14 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fada 	bl	8000a14 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e140      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ed      	beq.n	800145c <HAL_RCC_OscConfig+0x388>
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fac7 	bl	8000a14 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fac3 	bl	8000a14 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e129      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80014a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1ed      	bne.n	800148a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80014ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d03c      	beq.n	8001546 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01c      	beq.n	800150e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80014d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014da:	4a2c      	ldr	r2, [pc, #176]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa96 	bl	8000a14 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ec:	f7ff fa92 	bl	8000a14 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0fa      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ef      	beq.n	80014ec <HAL_RCC_OscConfig+0x418>
 800150c:	e01b      	b.n	8001546 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151e:	f7ff fa79 	bl	8000a14 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001526:	f7ff fa75 	bl	8000a14 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0dd      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800153a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ef      	bne.n	8001526 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80d1 	beq.w	80016f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b0c      	cmp	r3, #12
 800155a:	f000 808b 	beq.w	8001674 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d15e      	bne.n	8001624 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_RCC_OscConfig+0x4b8>)
 800156c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fa4f 	bl	8000a14 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001578:	e00c      	b.n	8001594 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fa4b 	bl	8000a14 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d905      	bls.n	8001594 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0b3      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
 800158c:	40021000 	.word	0x40021000
 8001590:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ec      	bne.n	800157a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	4b56      	ldr	r3, [pc, #344]	; (8001700 <HAL_RCC_OscConfig+0x62c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6a11      	ldr	r1, [r2, #32]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015ba:	0212      	lsls	r2, r2, #8
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015c2:	0852      	lsrs	r2, r2, #1
 80015c4:	3a01      	subs	r2, #1
 80015c6:	0552      	lsls	r2, r2, #21
 80015c8:	4311      	orrs	r1, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0652      	lsls	r2, r2, #25
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015da:	06d2      	lsls	r2, r2, #27
 80015dc:	430a      	orrs	r2, r1
 80015de:	4947      	ldr	r1, [pc, #284]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a44      	ldr	r2, [pc, #272]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fa0a 	bl	8000a14 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fa06 	bl	8000a14 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e06e      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x530>
 8001622:	e066      	b.n	80016f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a34      	ldr	r2, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 800162a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800162e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a31      	ldr	r2, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001642:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff f9e2 	bl	8000a14 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff f9de 	bl	8000a14 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e046      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x580>
 8001672:	e03e      	b.n	80016f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e039      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	429a      	cmp	r2, r3
 8001692:	d12c      	bne.n	80016ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	3b01      	subs	r3, #1
 80016a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d123      	bne.n	80016ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d11b      	bne.n	80016ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d113      	bne.n	80016ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	019f800c 	.word	0x019f800c

08001704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e11e      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b91      	ldr	r3, [pc, #580]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 020f 	bic.w	r2, r3, #15
 8001732:	498c      	ldr	r1, [pc, #560]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b8a      	ldr	r3, [pc, #552]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e106      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d073      	beq.n	8001840 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d129      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0f4      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001770:	f000 f966 	bl	8001a40 <RCC_GetSysClockFreqFromPLLSource>
 8001774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4a7c      	ldr	r2, [pc, #496]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d93f      	bls.n	80017fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800177e:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001792:	2b00      	cmp	r3, #0
 8001794:	d033      	beq.n	80017fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d12f      	bne.n	80017fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a6:	4a70      	ldr	r2, [pc, #448]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e024      	b.n	80017fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017bc:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0c6      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0be      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017dc:	f000 f8ce 	bl	800197c <HAL_RCC_GetSysClockFreq>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4a61      	ldr	r2, [pc, #388]	; (800196c <HAL_RCC_ClockConfig+0x268>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d909      	bls.n	80017fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017f2:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4957      	ldr	r1, [pc, #348]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001810:	f7ff f900 	bl	8000a14 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff f8fc 	bl	8000a14 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e095      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d023      	beq.n	8001894 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800185e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001862:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001878:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800187a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800187e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4936      	ldr	r1, [pc, #216]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
 8001892:	e008      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b80      	cmp	r3, #128	; 0x80
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4a32      	ldr	r2, [pc, #200]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d21d      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 020f 	bic.w	r2, r3, #15
 80018bc:	4929      	ldr	r1, [pc, #164]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f8a6 	bl	8000a14 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f8a2 	bl	8000a14 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e03b      	b.n	800195a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1ed      	bne.n	80018cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4917      	ldr	r1, [pc, #92]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490f      	ldr	r1, [pc, #60]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800192e:	f000 f825 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490c      	ldr	r1, [pc, #48]	; (8001970 <HAL_RCC_ClockConfig+0x26c>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x270>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f812 	bl	800097c <HAL_InitTick>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000
 8001968:	40021000 	.word	0x40021000
 800196c:	04c4b400 	.word	0x04c4b400
 8001970:	08002238 	.word	0x08002238
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b04      	cmp	r3, #4
 800198c:	d102      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e047      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	e03e      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d136      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3301      	adds	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019da:	68d2      	ldr	r2, [r2, #12]
 80019dc:	0a12      	lsrs	r2, r2, #8
 80019de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
      break;
 80019e8:	e00c      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	0a12      	lsrs	r2, r2, #8
 80019f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
      break;
 8001a02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0e5b      	lsrs	r3, r3, #25
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e001      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a24:	693b      	ldr	r3, [r7, #16]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	007a1200 	.word	0x007a1200

08001a40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d10c      	bne.n	8001a7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a6e:	68d2      	ldr	r2, [r2, #12]
 8001a70:	0a12      	lsrs	r2, r2, #8
 8001a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
    break;
 8001a7c:	e00c      	b.n	8001a98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	0a12      	lsrs	r2, r2, #8
 8001a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    break;
 8001a96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0e5b      	lsrs	r3, r3, #25
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	007a1200 	.word	0x007a1200
 8001ac8:	00f42400 	.word	0x00f42400

08001acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e09d      	b.n	8001c1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aee:	d009      	beq.n	8001b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
 8001af6:	e005      	b.n	8001b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fcc2 	bl	80004a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b44:	d902      	bls.n	8001b4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e002      	b.n	8001b52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001b5a:	d007      	beq.n	8001b6c <HAL_SPI_Init+0xa0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b64:	d002      	beq.n	8001b6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	f003 0204 	and.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_SPI_Transmit+0x22>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e158      	b.n	8001ef6 <HAL_SPI_Transmit+0x2d4>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c4c:	f7fe fee2 	bl	8000a14 <HAL_GetTick>
 8001c50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d002      	beq.n	8001c68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c66:	e13d      	b.n	8001ee4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_Transmit+0x52>
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c78:	e134      	b.n	8001ee4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc4:	d10f      	bne.n	8001ce6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d007      	beq.n	8001d04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d0c:	d94b      	bls.n	8001da6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_SPI_Transmit+0xfa>
 8001d16:	8afb      	ldrh	r3, [r7, #22]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d13e      	bne.n	8001d9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	881a      	ldrh	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	1c9a      	adds	r2, r3, #2
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d40:	e02b      	b.n	8001d9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d112      	bne.n	8001d76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	1c9a      	adds	r2, r3, #2
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d74:	e011      	b.n	8001d9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d76:	f7fe fe4d 	bl	8000a14 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d803      	bhi.n	8001d8e <HAL_SPI_Transmit+0x16c>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d102      	bne.n	8001d94 <HAL_SPI_Transmit+0x172>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d98:	e0a4      	b.n	8001ee4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ce      	bne.n	8001d42 <HAL_SPI_Transmit+0x120>
 8001da4:	e07c      	b.n	8001ea0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_SPI_Transmit+0x192>
 8001dae:	8afb      	ldrh	r3, [r7, #22]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d170      	bne.n	8001e96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d912      	bls.n	8001de4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	1c9a      	adds	r2, r3, #2
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b02      	subs	r3, #2
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001de2:	e058      	b.n	8001e96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e0a:	e044      	b.n	8001e96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d12b      	bne.n	8001e72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d912      	bls.n	8001e4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	1c9a      	adds	r2, r3, #2
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b02      	subs	r3, #2
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e48:	e025      	b.n	8001e96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	330c      	adds	r3, #12
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e70:	e011      	b.n	8001e96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e72:	f7fe fdcf 	bl	8000a14 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d803      	bhi.n	8001e8a <HAL_SPI_Transmit+0x268>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d102      	bne.n	8001e90 <HAL_SPI_Transmit+0x26e>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e94:	e026      	b.n	8001ee4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1b5      	bne.n	8001e0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f949 	bl	800213c <SPI_EndRxTxTransaction>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
 8001ee0:	e000      	b.n	8001ee4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f10:	f7fe fd80 	bl	8000a14 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f20:	f7fe fd78 	bl	8000a14 <HAL_GetTick>
 8001f24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f26:	4b39      	ldr	r3, [pc, #228]	; (800200c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	015b      	lsls	r3, r3, #5
 8001f2c:	0d1b      	lsrs	r3, r3, #20
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f36:	e054      	b.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d050      	beq.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f40:	f7fe fd68 	bl	8000a14 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d902      	bls.n	8001f56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d13d      	bne.n	8001fd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f6e:	d111      	bne.n	8001f94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f78:	d004      	beq.n	8001f84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d107      	bne.n	8001f94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9c:	d10f      	bne.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e017      	b.n	8002002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d19b      	bne.n	8001f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000

08002010 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002022:	f7fe fcf7 	bl	8000a14 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4413      	add	r3, r2
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002032:	f7fe fcef 	bl	8000a14 <HAL_GetTick>
 8002036:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	330c      	adds	r3, #12
 800203e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00da      	lsls	r2, r3, #3
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	0d1b      	lsrs	r3, r3, #20
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002058:	e060      	b.n	800211c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002060:	d107      	bne.n	8002072 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002070:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d050      	beq.n	800211c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800207a:	f7fe fccb 	bl	8000a14 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	429a      	cmp	r2, r3
 8002088:	d902      	bls.n	8002090 <SPI_WaitFifoStateUntilTimeout+0x80>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	2b00      	cmp	r3, #0
 800208e:	d13d      	bne.n	800210c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800209e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a8:	d111      	bne.n	80020ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b2:	d004      	beq.n	80020be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d107      	bne.n	80020ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	d10f      	bne.n	80020f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e010      	b.n	800212e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3b01      	subs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4013      	ands	r3, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d196      	bne.n	800205a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff ff5b 	bl	8002010 <SPI_WaitFifoStateUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e027      	b.n	80021c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff fec0 	bl	8001f00 <SPI_WaitFlagStateUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e014      	b.n	80021c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ff34 	bl	8002010 <SPI_WaitFifoStateUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e000      	b.n	80021c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <memset>:
 80021c8:	4402      	add	r2, r0
 80021ca:	4603      	mov	r3, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <__libc_init_array>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	4d0d      	ldr	r5, [pc, #52]	; (8002210 <__libc_init_array+0x38>)
 80021dc:	4c0d      	ldr	r4, [pc, #52]	; (8002214 <__libc_init_array+0x3c>)
 80021de:	1b64      	subs	r4, r4, r5
 80021e0:	10a4      	asrs	r4, r4, #2
 80021e2:	2600      	movs	r6, #0
 80021e4:	42a6      	cmp	r6, r4
 80021e6:	d109      	bne.n	80021fc <__libc_init_array+0x24>
 80021e8:	4d0b      	ldr	r5, [pc, #44]	; (8002218 <__libc_init_array+0x40>)
 80021ea:	4c0c      	ldr	r4, [pc, #48]	; (800221c <__libc_init_array+0x44>)
 80021ec:	f000 f818 	bl	8002220 <_init>
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	2600      	movs	r6, #0
 80021f6:	42a6      	cmp	r6, r4
 80021f8:	d105      	bne.n	8002206 <__libc_init_array+0x2e>
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002200:	4798      	blx	r3
 8002202:	3601      	adds	r6, #1
 8002204:	e7ee      	b.n	80021e4 <__libc_init_array+0xc>
 8002206:	f855 3b04 	ldr.w	r3, [r5], #4
 800220a:	4798      	blx	r3
 800220c:	3601      	adds	r6, #1
 800220e:	e7f2      	b.n	80021f6 <__libc_init_array+0x1e>
 8002210:	08002248 	.word	0x08002248
 8002214:	08002248 	.word	0x08002248
 8002218:	08002248 	.word	0x08002248
 800221c:	0800224c 	.word	0x0800224c

08002220 <_init>:
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002222:	bf00      	nop
 8002224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002226:	bc08      	pop	{r3}
 8002228:	469e      	mov	lr, r3
 800222a:	4770      	bx	lr

0800222c <_fini>:
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	bf00      	nop
 8002230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002232:	bc08      	pop	{r3}
 8002234:	469e      	mov	lr, r3
 8002236:	4770      	bx	lr
